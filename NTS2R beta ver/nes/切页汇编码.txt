 1F:C6E1:A5 43     LDA $0043 = #$28           ;读取$43值到寄存器A
 1F:C6E3:85 43     STA $0043 = #$28           ;把寄存器A的值写到$43
 1F:C6E5:85 44     STA $0044 = #$28           ;把寄存器A的值写到$44
 1F:C6E7:85 ED     STA $00ED = #$28           ;把寄存器A的值写到$ED
 1F:C6E9:A9 01     LDA #$01                   ;向寄存器A写入数值0x01
 1F:C6EB:85 EB     STA $00EB = #$00           ;把0x01写到$EB
 1F:C6ED:A5 ED     LDA $00ED = #$28           ;读取$E0值到寄存器A
 1F:C6EF:20 20 C7  JSR $C720                  ;执行子程式 跳转$C720
 1F:C6F2:A5 EB     LDA $00EB = #$00           ;如果$EB=0x00 则标志Z=1 否则Z=0
 1F:C6F4:D0 03     BNE $C6F9                  ;如果Z=0 跳转到$C6F9继续运行
 1F:C6F6:4C E9 C6  JMP $C6E9                  ;跳转到$C6E9继续执行
 1F:C6F9:A9 00     LDA #$00                   ;向寄存器A写入数值0x00
 1F:C6FB:85 EB     STA $00EB = #$00           ;清空$EB数值
 1F:C6FD:60        RTS                        ;返回继续执行程序

 1F:C6FE:A9 34     LDA #$34                   ;把0x34写到寄存器A
 1F:C700:D0 E1     BNE $C6E3                  ;跳转到$C6E3执行程序
 1F:C702:A9 22     LDA #$22                   ;把0x22写到寄存器A
 1F:C704:D0 DD     BNE $C6E3                  ;跳转到$C6E3执行程序
 1F:C706:A9 28     LDA #$28                   ;把0x28写到寄存器A
 1F:C708:D0 D9     BNE $C6E3                  ;跳转到$C6E3执行程序
 1F:C70A:A9 38     LDA #$38                   ;把0x38写到寄存器A
 1F:C70C:D0 D5     BNE $C6E3                  ;跳转到$C6E3执行程序
 1F:C70E:A9 3A     LDA #$3A                   ;把0x3A写到寄存器A
 1F:C710:D0 D1     BNE $C6E3                  ;跳转到$C6E3执行程序
 1F:C712:A9 3C     LDA #$3C                   ;把0x3C写到寄存器A
 1F:C714:D0 CD     BNE $C6E3                  ;跳转到$C6E3执行程序

 1F:C716:48        PHA                        ;把寄存器A压栈
 1F:C717:A5 EB     LDA $00EB = #$00           ;读取$EB值到寄存器A
 1F:C719:F0 04     BEQ $C71F                  ;如果$EB=0x00 则跳转到$C71F继续执行
 1F:C71B:A9 00     LDA #$00                   ;向寄存器A写入数值0x00
 1F:C71D:85 EB     STA $00EB = #$00           ;清空$EB数值
 1F:C71F:68        PLA                        ;出栈

 1F:C720:48        PHA                        ;把寄存器A压栈
 1F:C721:A9 06     LDA #$06
 1F:C723:8D 00 80  STA $8000 = #$00           ;设置$8000-$9FFF作为逻辑切页地址
 1F:C726:68        PLA                        ;出栈
 1F:C727:8D 01 80  STA $8001 = #$00           ;$43=$ED=寄存器A的值的bank切入逻辑地址
 1F:C72A:48        PHA                        ;把寄存器A压栈
 1F:C72B:A9 07     LDA #$07
 1F:C72D:8D 00 80  STA $8000 = #$00           ;设置$A000-$BFFF作为逻辑切页地址
 1F:C730:68        PLA                        ;出栈
 1F:C731:18        CLC                        ;清空C标志
 1F:C732:69 01     ADC #$01                   ;寄存器A数值+1=新寄存器A数值
 1F:C734:8D 01 80  STA $8001 = #$00           :$43+1=$ED+1=新寄存器A数值的值的bank切入逻辑地址
 1F:C737:60        RTS                        ;返回继续执行程序

 1F:C738:A9 F0     LDA #$F0
 1F:C73A:D0 04     BNE $C740
 1F:C73C:A9 2D     LDA #$2D
 1F:C73E:D0 06     BNE $C746
 1F:C740:C5 EA     CMP $00EA = #$00
 1F:C742:F0 14     BEQ $C758
 1F:C744:85 EA     STA $00EA = #$00
 1F:C746:EA        NOP
 1F:C747:EA        NOP
 1F:C748:EA        NOP
 1F:C749:EA        NOP
 1F:C74A:86 19     STX $0019 = #$00
 1F:C74C:A6 E8     LDX $00E8 = #$07
 1F:C74E:95 E0     STA $E0,X @ $00E0 = #$88
 1F:C750:E8        INX
 1F:C751:8A        TXA
 1F:C752:29 07     AND #$07
 1F:C754:85 E8     STA $00E8 = #$07
 1F:C756:A6 19     LDX $0019 = #$00
 1F:C758:60        RTS                        ;返回继续执行程序

 1F:C759:A5 43     LDA $0043 = #$30           ;读取$43值到寄存器A
 1F:C75B:85 45     STA $0045 = #$28           ;把寄存器A的值写到$45(备份操作)
 1F:C75D:68        PLA                        ;出栈
 1F:C75E:85 F3     STA $00F3 = #$1E           ;把寄存器A的值写到$F3
 1F:C760:68        PLA                        ;出栈
 1F:C761:85 F4     STA $00F4 = #$BF           ;把寄存器A的值写到$F4
 1F:C763:A0 01     LDY #$01                   ;把0x01值到寄存器Y
 1F:C765:B1 F3     LDA ($F3),Y @ $BF1E = #$4F
 1F:C767:99 00 06  STA $0600,Y @ $0600 = #$00
 1F:C76A:C8        INY
 1F:C76B:D0 F8     BNE $C765                  ;设置复归地址
 1F:C76D:4C 01 06  JMP $0601                  ;跳转到$0601执行

 1F:C770:86 F2     STX $00F2 = #$40           ;备份寄存器X数据
 1F:C772:BA        TSX                        ;取得堆栈指针
 1F:C773:68        PLA
 1F:C774:68        PLA                        ;堆栈指针-2 用于写新的jsr返回地址
 1F:C775:BD 01 01  LDA $0101,X @ $0101 = #$00 
 1F:C778:85 F3     STA $00F3 = #$1E
 1F:C77A:BD 02 01  LDA $0102,X @ $0102 = #$00
 1F:C77D:85 F4     STA $00F4 = #$BF           ;取得原来jsr返回地址
 1F:C77F:A0 02     LDY #$02
 1F:C781:B1 F3     LDA ($F3),Y @ $BF1E = #$4F
 1F:C783:48        PHA
 1F:C784:88        DEY
 1F:C785:B1 F3     LDA ($F3),Y @ $BF1E = #$4F
 1F:C787:48        PHA                        ;写入新的rts返回寻址的地址（即复归命令的 yy xx）
 1F:C788:A6 F2     LDX $00F2 = #$40           ;还原寄存器X数据
 1F:C78A:A5 45     LDA $0045 = #$28           ;取得备份的页番号（记忆操作的取得）
 1F:C78C:4C E3 C6  JMP $C6E3                  ;跳到$C6E3 执行切页命令